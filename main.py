# main.py - G·ª≠i t√≠n hi·ªáu k√®m ·∫£nh bi·ªÉu ƒë·ªì t·ª´ signal_engine.py (webhook version)
from flask import Flask, request
import requests
import threading
import time
import signal_engine
import os
import asyncio

from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# === C·∫•u h√¨nh ===
BOT_TOKEN = "7331189117:AAFjEXI-8rsNH4QXbxZLgiHbbSlyIvCqP3s"
CHAT_ID = "576589496"
WEBHOOK_URL = f"https://botfxtrading.onrender.com/{BOT_TOKEN}"  # ‚ö†Ô∏è THAY B·∫∞NG LINK APP C·ª¶A B·∫†N

app = Flask(__name__)
last_signal_cache = []

# Route m·∫∑c ƒë·ªãnh ƒë·ªÉ UptimeRobot ping
@app.route('/')
def index():
    return "‚úÖ Bot is running with webhook + TradingView data!"

# Route webhook ƒë·ªÉ nh·∫≠n update t·ª´ Telegram
@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(), application.bot)
    asyncio.run(application.process_update(update))
    return 'ok'

# G·ª≠i t√≠n hi·ªáu th·ªß c√¥ng qua API
@app.route('/send', methods=['POST'])
def send():
    data = request.get_json()
    if not data:
        return "No JSON payload", 400
    message = f"{data['side']} {data['symbol']}\nSL: {data['sl']}\nTP: {data['tp']}"
    telegram_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    requests.post(telegram_url, json={"chat_id": CHAT_ID, "text": message})
    print("üì§ G·ª≠i t√≠n hi·ªáu th·ªß c√¥ng:", message)
    return "Message sent!", 200

# L·ªánh ki·ªÉm tra bot
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ Bot TradingView ƒë√£ s·∫µn s√†ng r·ªìi n√®!")

# G·ª≠i t√≠n hi·ªáu k√®m ·∫£nh
def send_signal_with_chart(signal):
    msg = f"""üìä {signal['side']} {signal['symbol']} ({signal['tf']})
üéØ Entry: {signal['entry']}
üõ° SL: {signal['sl']}
üéÅ TP: {signal['tp']}
üìà RR: {signal['rr']}"""
    try:
        with open(signal["chart"], "rb") as photo:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
            files = {"photo": photo}
            data = {"chat_id": CHAT_ID, "caption": msg}
            response = requests.post(url, files=files, data=data)
            if response.status_code == 200:
                print("‚úÖ ƒê√£ g·ª≠i t√≠n hi·ªáu k√®m ·∫£nh:", signal["symbol"])
            else:
                print("‚ö†Ô∏è G·ª≠i ·∫£nh th·∫•t b·∫°i:", response.text)
    except Exception as e:
        print("‚ùå L·ªói khi g·ª≠i ·∫£nh bi·ªÉu ƒë·ªì:", e)

# V√≤ng l·∫∑p qu√©t t√≠n hi·ªáu
def auto_scan_loop():
    global last_signal_cache
    while True:
        try:
            signals = signal_engine.get_trade_signal()
            if signals:
                new_signals = [s for s in signals if s not in last_signal_cache]
                if new_signals:
                    last_signal_cache = signals
                    for signal in new_signals:
                        send_signal_with_chart(signal)
                else:
                    print("‚ö†Ô∏è Kh√¥ng c√≥ t√≠n hi·ªáu m·ªõi (b·ªã tr√πng).")
            else:
                print("‚è≥ Ch∆∞a c√≥ t√≠n hi·ªáu TradingView ph√π h·ª£p.")
        except Exception as e:
            print("‚ùå L·ªói khi qu√©t t√≠n hi·ªáu:", e)
        time.sleep(900)  # 15 ph√∫t

# Kh·ªüi t·∫°o bot app
application = ApplicationBuilder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("start", start))

# Thi·∫øt l·∫≠p webhook khi kh·ªüi ƒë·ªông
def setup_webhook():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    response = requests.post(url, json={"url": WEBHOOK_URL})
    if response.status_code == 200:
        print("‚úÖ ƒê√£ thi·∫øt l·∫≠p webhook th√†nh c√¥ng.")
    else:
        print("‚ùå L·ªói thi·∫øt l·∫≠p webhook:", response.text)

# Kh·ªüi ƒë·ªông Flask + auto_scan
if __name__ == "__main__":
    setup_webhook()
    threading.Thread(target=auto_scan_loop, daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
